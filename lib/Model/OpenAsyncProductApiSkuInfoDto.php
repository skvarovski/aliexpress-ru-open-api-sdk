<?php
/**
 * OpenAsyncProductApiSkuInfoDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * open-async-product-api api
 *
 * open-async-product-api
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OpenAsyncProductApiSkuInfoDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class OpenAsyncProductApiSkuInfoDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'open_async_product_apiSkuInfoDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inventory' => 'string',
        'price' => 'float',
        'discount_price' => 'float',
        'sku_code' => 'string',
        'bar_code' => 'string',
        'sku_attributes_list' => '\OpenAPI\Client\Model\OpenAsyncProductApiSkuAttributesDto[]',
        'gtin' => 'string',
        'tnved_codes' => 'string[]',
        'okpd2_codes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inventory' => 'uint64',
        'price' => 'float',
        'discount_price' => 'float',
        'sku_code' => null,
        'bar_code' => null,
        'sku_attributes_list' => null,
        'gtin' => null,
        'tnved_codes' => null,
        'okpd2_codes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inventory' => 'inventory',
        'price' => 'price',
        'discount_price' => 'discount_price',
        'sku_code' => 'sku_code',
        'bar_code' => 'bar_code',
        'sku_attributes_list' => 'sku_attributes_list',
        'gtin' => 'gtin',
        'tnved_codes' => 'tnved_codes',
        'okpd2_codes' => 'okpd2_codes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inventory' => 'setInventory',
        'price' => 'setPrice',
        'discount_price' => 'setDiscountPrice',
        'sku_code' => 'setSkuCode',
        'bar_code' => 'setBarCode',
        'sku_attributes_list' => 'setSkuAttributesList',
        'gtin' => 'setGtin',
        'tnved_codes' => 'setTnvedCodes',
        'okpd2_codes' => 'setOkpd2Codes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inventory' => 'getInventory',
        'price' => 'getPrice',
        'discount_price' => 'getDiscountPrice',
        'sku_code' => 'getSkuCode',
        'bar_code' => 'getBarCode',
        'sku_attributes_list' => 'getSkuAttributesList',
        'gtin' => 'getGtin',
        'tnved_codes' => 'getTnvedCodes',
        'okpd2_codes' => 'getOkpd2Codes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inventory'] = $data['inventory'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['discount_price'] = $data['discount_price'] ?? null;
        $this->container['sku_code'] = $data['sku_code'] ?? null;
        $this->container['bar_code'] = $data['bar_code'] ?? null;
        $this->container['sku_attributes_list'] = $data['sku_attributes_list'] ?? null;
        $this->container['gtin'] = $data['gtin'] ?? null;
        $this->container['tnved_codes'] = $data['tnved_codes'] ?? null;
        $this->container['okpd2_codes'] = $data['okpd2_codes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['inventory'] === null) {
            $invalidProperties[] = "'inventory' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['sku_code'] === null) {
            $invalidProperties[] = "'sku_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inventory
     *
     * @return string
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param string $inventory Остаток товара на складе от 1 до 999999
     *
     * @return self
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price Цена товара от 0,01 до 999999
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets discount_price
     *
     * @return float|null
     */
    public function getDiscountPrice()
    {
        return $this->container['discount_price'];
    }

    /**
     * Sets discount_price
     *
     * @param float|null $discount_price Цена товара со скидкой
     *
     * @return self
     */
    public function setDiscountPrice($discount_price)
    {
        $this->container['discount_price'] = $discount_price;

        return $this;
    }

    /**
     * Gets sku_code
     *
     * @return string
     */
    public function getSkuCode()
    {
        return $this->container['sku_code'];
    }

    /**
     * Sets sku_code
     *
     * @param string $sku_code Идентификатор экземпляра: артикул или штрихкод
     *
     * @return self
     */
    public function setSkuCode($sku_code)
    {
        $this->container['sku_code'] = $sku_code;

        return $this;
    }

    /**
     * Gets bar_code
     *
     * @return string|null
     */
    public function getBarCode()
    {
        return $this->container['bar_code'];
    }

    /**
     * Sets bar_code
     *
     * @param string|null $bar_code Штрихкод: обязательно для продавцов, работающих по модели Фулфилмент «Цайняо»
     *
     * @return self
     */
    public function setBarCode($bar_code)
    {
        $this->container['bar_code'] = $bar_code;

        return $this;
    }

    /**
     * Gets sku_attributes_list
     *
     * @return \OpenAPI\Client\Model\OpenAsyncProductApiSkuAttributesDto[]|null
     */
    public function getSkuAttributesList()
    {
        return $this->container['sku_attributes_list'];
    }

    /**
     * Sets sku_attributes_list
     *
     * @param \OpenAPI\Client\Model\OpenAsyncProductApiSkuAttributesDto[]|null $sku_attributes_list Список sku атрибутов
     *
     * @return self
     */
    public function setSkuAttributesList($sku_attributes_list)
    {
        $this->container['sku_attributes_list'] = $sku_attributes_list;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin gtin
     *
     * @return self
     */
    public function setGtin($gtin)
    {
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets tnved_codes
     *
     * @return string[]|null
     */
    public function getTnvedCodes()
    {
        return $this->container['tnved_codes'];
    }

    /**
     * Sets tnved_codes
     *
     * @param string[]|null $tnved_codes tnved_codes
     *
     * @return self
     */
    public function setTnvedCodes($tnved_codes)
    {
        $this->container['tnved_codes'] = $tnved_codes;

        return $this;
    }

    /**
     * Gets okpd2_codes
     *
     * @return string[]|null
     */
    public function getOkpd2Codes()
    {
        return $this->container['okpd2_codes'];
    }

    /**
     * Sets okpd2_codes
     *
     * @param string[]|null $okpd2_codes okpd2_codes
     *
     * @return self
     */
    public function setOkpd2Codes($okpd2_codes)
    {
        $this->container['okpd2_codes'] = $okpd2_codes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


