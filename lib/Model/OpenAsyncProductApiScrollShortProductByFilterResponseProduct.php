<?php
/**
 * OpenAsyncProductApiScrollShortProductByFilterResponseProduct
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * open-async-product-api api
 *
 * open-async-product-api
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OpenAsyncProductApiScrollShortProductByFilterResponseProduct Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OpenAsyncProductApiScrollShortProductByFilterResponseProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'open_async_product_apiScrollShortProductByFilterResponseProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'ali_created_at' => '\DateTime',
        'ali_updated_at' => '\DateTime',
        'category_id' => 'string',
        'currency_code' => 'string',
        'delivery_time' => 'string',
        'owner_member_id' => 'string',
        'owner_member_seq' => 'string',
        'freight_template_id' => 'string',
        'group_ids' => 'string[]',
        'main_image_url' => 'string',
        'main_image_urls' => 'string[]',
        'sku' => '\OpenAPI\Client\Model\OpenAsyncProductApiScrollShortProductByFilterResponseSKU[]',
        'subject' => 'string',
        'marketing_images' => '\OpenAPI\Client\Model\ScrollShortProductByFilterResponseMarketingImage[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'ali_created_at' => 'date-time',
        'ali_updated_at' => 'date-time',
        'category_id' => 'int64',
        'currency_code' => null,
        'delivery_time' => 'int64',
        'owner_member_id' => null,
        'owner_member_seq' => 'int64',
        'freight_template_id' => 'int64',
        'group_ids' => 'int64',
        'main_image_url' => null,
        'main_image_urls' => null,
        'sku' => null,
        'subject' => null,
        'marketing_images' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'ali_created_at' => false,
		'ali_updated_at' => false,
		'category_id' => false,
		'currency_code' => false,
		'delivery_time' => false,
		'owner_member_id' => false,
		'owner_member_seq' => false,
		'freight_template_id' => false,
		'group_ids' => false,
		'main_image_url' => false,
		'main_image_urls' => false,
		'sku' => false,
		'subject' => false,
		'marketing_images' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ali_created_at' => 'ali_created_at',
        'ali_updated_at' => 'ali_updated_at',
        'category_id' => 'category_id',
        'currency_code' => 'currency_code',
        'delivery_time' => 'delivery_time',
        'owner_member_id' => 'owner_member_id',
        'owner_member_seq' => 'owner_member_seq',
        'freight_template_id' => 'freight_template_id',
        'group_ids' => 'group_ids',
        'main_image_url' => 'main_image_url',
        'main_image_urls' => 'main_image_urls',
        'sku' => 'sku',
        'subject' => 'Subject',
        'marketing_images' => 'marketing_images'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ali_created_at' => 'setAliCreatedAt',
        'ali_updated_at' => 'setAliUpdatedAt',
        'category_id' => 'setCategoryId',
        'currency_code' => 'setCurrencyCode',
        'delivery_time' => 'setDeliveryTime',
        'owner_member_id' => 'setOwnerMemberId',
        'owner_member_seq' => 'setOwnerMemberSeq',
        'freight_template_id' => 'setFreightTemplateId',
        'group_ids' => 'setGroupIds',
        'main_image_url' => 'setMainImageUrl',
        'main_image_urls' => 'setMainImageUrls',
        'sku' => 'setSku',
        'subject' => 'setSubject',
        'marketing_images' => 'setMarketingImages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ali_created_at' => 'getAliCreatedAt',
        'ali_updated_at' => 'getAliUpdatedAt',
        'category_id' => 'getCategoryId',
        'currency_code' => 'getCurrencyCode',
        'delivery_time' => 'getDeliveryTime',
        'owner_member_id' => 'getOwnerMemberId',
        'owner_member_seq' => 'getOwnerMemberSeq',
        'freight_template_id' => 'getFreightTemplateId',
        'group_ids' => 'getGroupIds',
        'main_image_url' => 'getMainImageUrl',
        'main_image_urls' => 'getMainImageUrls',
        'sku' => 'getSku',
        'subject' => 'getSubject',
        'marketing_images' => 'getMarketingImages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('ali_created_at', $data ?? [], null);
        $this->setIfExists('ali_updated_at', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('delivery_time', $data ?? [], null);
        $this->setIfExists('owner_member_id', $data ?? [], null);
        $this->setIfExists('owner_member_seq', $data ?? [], null);
        $this->setIfExists('freight_template_id', $data ?? [], null);
        $this->setIfExists('group_ids', $data ?? [], null);
        $this->setIfExists('main_image_url', $data ?? [], null);
        $this->setIfExists('main_image_urls', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('marketing_images', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Идентификатор продукта
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ali_created_at
     *
     * @return \DateTime|null
     */
    public function getAliCreatedAt()
    {
        return $this->container['ali_created_at'];
    }

    /**
     * Sets ali_created_at
     *
     * @param \DateTime|null $ali_created_at Дата создания
     *
     * @return self
     */
    public function setAliCreatedAt($ali_created_at)
    {

        if (is_null($ali_created_at)) {
            throw new \InvalidArgumentException('non-nullable ali_created_at cannot be null');
        }

        $this->container['ali_created_at'] = $ali_created_at;

        return $this;
    }

    /**
     * Gets ali_updated_at
     *
     * @return \DateTime|null
     */
    public function getAliUpdatedAt()
    {
        return $this->container['ali_updated_at'];
    }

    /**
     * Sets ali_updated_at
     *
     * @param \DateTime|null $ali_updated_at Дата обновления
     *
     * @return self
     */
    public function setAliUpdatedAt($ali_updated_at)
    {

        if (is_null($ali_updated_at)) {
            throw new \InvalidArgumentException('non-nullable ali_updated_at cannot be null');
        }

        $this->container['ali_updated_at'] = $ali_updated_at;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string|null $category_id Индентификатор категории
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {

        if (is_null($category_id)) {
            throw new \InvalidArgumentException('non-nullable category_id cannot be null');
        }

        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Код валюты
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {

        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return string|null
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param string|null $delivery_time Время доставки
     *
     * @return self
     */
    public function setDeliveryTime($delivery_time)
    {

        if (is_null($delivery_time)) {
            throw new \InvalidArgumentException('non-nullable delivery_time cannot be null');
        }

        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets owner_member_id
     *
     * @return string|null
     */
    public function getOwnerMemberId()
    {
        return $this->container['owner_member_id'];
    }

    /**
     * Sets owner_member_id
     *
     * @param string|null $owner_member_id логин, создавшего продукт
     *
     * @return self
     */
    public function setOwnerMemberId($owner_member_id)
    {

        if (is_null($owner_member_id)) {
            throw new \InvalidArgumentException('non-nullable owner_member_id cannot be null');
        }

        $this->container['owner_member_id'] = $owner_member_id;

        return $this;
    }

    /**
     * Gets owner_member_seq
     *
     * @return string|null
     */
    public function getOwnerMemberSeq()
    {
        return $this->container['owner_member_seq'];
    }

    /**
     * Sets owner_member_seq
     *
     * @param string|null $owner_member_seq ID, создавшего продукт
     *
     * @return self
     */
    public function setOwnerMemberSeq($owner_member_seq)
    {

        if (is_null($owner_member_seq)) {
            throw new \InvalidArgumentException('non-nullable owner_member_seq cannot be null');
        }

        $this->container['owner_member_seq'] = $owner_member_seq;

        return $this;
    }

    /**
     * Gets freight_template_id
     *
     * @return string|null
     */
    public function getFreightTemplateId()
    {
        return $this->container['freight_template_id'];
    }

    /**
     * Sets freight_template_id
     *
     * @param string|null $freight_template_id Идентификатор шаблона доставки, уникален для каждого продавца или шаблона
     *
     * @return self
     */
    public function setFreightTemplateId($freight_template_id)
    {

        if (is_null($freight_template_id)) {
            throw new \InvalidArgumentException('non-nullable freight_template_id cannot be null');
        }

        $this->container['freight_template_id'] = $freight_template_id;

        return $this;
    }

    /**
     * Gets group_ids
     *
     * @return string[]|null
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param string[]|null $group_ids group_ids
     *
     * @return self
     */
    public function setGroupIds($group_ids)
    {

        if (is_null($group_ids)) {
            throw new \InvalidArgumentException('non-nullable group_ids cannot be null');
        }

        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets main_image_url
     *
     * @return string|null
     */
    public function getMainImageUrl()
    {
        return $this->container['main_image_url'];
    }

    /**
     * Sets main_image_url
     *
     * @param string|null $main_image_url Картинка товара
     *
     * @return self
     */
    public function setMainImageUrl($main_image_url)
    {

        if (is_null($main_image_url)) {
            throw new \InvalidArgumentException('non-nullable main_image_url cannot be null');
        }

        $this->container['main_image_url'] = $main_image_url;

        return $this;
    }

    /**
     * Gets main_image_urls
     *
     * @return string[]|null
     */
    public function getMainImageUrls()
    {
        return $this->container['main_image_urls'];
    }

    /**
     * Sets main_image_urls
     *
     * @param string[]|null $main_image_urls main_image_urls
     *
     * @return self
     */
    public function setMainImageUrls($main_image_urls)
    {

        if (is_null($main_image_urls)) {
            throw new \InvalidArgumentException('non-nullable main_image_urls cannot be null');
        }

        $this->container['main_image_urls'] = $main_image_urls;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return \OpenAPI\Client\Model\OpenAsyncProductApiScrollShortProductByFilterResponseSKU[]|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param \OpenAPI\Client\Model\OpenAsyncProductApiScrollShortProductByFilterResponseSKU[]|null $sku sku
     *
     * @return self
     */
    public function setSku($sku)
    {

        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }

        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {

        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets marketing_images
     *
     * @return \OpenAPI\Client\Model\ScrollShortProductByFilterResponseMarketingImage[]|null
     */
    public function getMarketingImages()
    {
        return $this->container['marketing_images'];
    }

    /**
     * Sets marketing_images
     *
     * @param \OpenAPI\Client\Model\ScrollShortProductByFilterResponseMarketingImage[]|null $marketing_images Маркетинговые изображения
     *
     * @return self
     */
    public function setMarketingImages($marketing_images)
    {

        if (is_null($marketing_images)) {
            throw new \InvalidArgumentException('non-nullable marketing_images cannot be null');
        }

        $this->container['marketing_images'] = $marketing_images;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


