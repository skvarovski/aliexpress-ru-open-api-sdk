<?php
/**
 * OpenAsyncProductApiProduct
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * open-async-product-api api
 *
 * open-async-product-api
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OpenAsyncProductApiProduct Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class OpenAsyncProductApiProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'open_async_product_apiProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'language' => 'string',
        'product_unit' => 'int',
        'multi_language_description_list' => '\OpenAPI\Client\Model\OpenAsyncProductApiSingleLanguageDescriptionDto[]',
        'multi_language_subject_list' => '\OpenAPI\Client\Model\OpenAsyncProductApiSingleLanguageTitleDto[]',
        'aliexpress_category_id' => 'string',
        'brand_name' => 'string',
        'main_image_urls_list' => 'string[]',
        'sku_info_list' => '\OpenAPI\Client\Model\OpenAsyncProductApiSkuInfoDto[]',
        'attribute_list' => '\OpenAPI\Client\Model\OpenAsyncProductApiAttributeDto[]',
        'inventory_deduction_strategy' => 'string',
        'weight' => 'string',
        'package_length' => 'int',
        'package_height' => 'int',
        'package_width' => 'int',
        'freight_template_id' => 'string',
        'size_chart_id' => 'string',
        'shipping_lead_time' => 'string',
        'service_policy_id' => 'string',
        'ae_group_ids' => 'string[]',
        'package_type' => 'bool',
        'lot_num' => 'string',
        'gtin' => 'string',
        'tnved_codes' => 'string[]',
        'okpd2_codes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'language' => null,
        'product_unit' => 'int64',
        'multi_language_description_list' => null,
        'multi_language_subject_list' => null,
        'aliexpress_category_id' => 'uint64',
        'brand_name' => null,
        'main_image_urls_list' => null,
        'sku_info_list' => null,
        'attribute_list' => null,
        'inventory_deduction_strategy' => null,
        'weight' => null,
        'package_length' => 'int64',
        'package_height' => 'int64',
        'package_width' => 'int64',
        'freight_template_id' => 'uint64',
        'size_chart_id' => 'uint64',
        'shipping_lead_time' => 'uint64',
        'service_policy_id' => 'uint64',
        'ae_group_ids' => 'uint64',
        'package_type' => null,
        'lot_num' => 'uint64',
        'gtin' => null,
        'tnved_codes' => null,
        'okpd2_codes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'language' => 'language',
        'product_unit' => 'product_unit',
        'multi_language_description_list' => 'multi_language_description_list',
        'multi_language_subject_list' => 'multi_language_subject_list',
        'aliexpress_category_id' => 'aliexpress_category_id',
        'brand_name' => 'brand_name',
        'main_image_urls_list' => 'main_image_urls_list',
        'sku_info_list' => 'sku_info_list',
        'attribute_list' => 'attribute_list',
        'inventory_deduction_strategy' => 'inventory_deduction_strategy',
        'weight' => 'weight',
        'package_length' => 'package_length',
        'package_height' => 'package_height',
        'package_width' => 'package_width',
        'freight_template_id' => 'freight_template_id',
        'size_chart_id' => 'size_chart_id',
        'shipping_lead_time' => 'shipping_lead_time',
        'service_policy_id' => 'service_policy_id',
        'ae_group_ids' => 'ae_group_ids',
        'package_type' => 'package_type',
        'lot_num' => 'lot_num',
        'gtin' => 'gtin',
        'tnved_codes' => 'tnved_codes',
        'okpd2_codes' => 'okpd2_codes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'language' => 'setLanguage',
        'product_unit' => 'setProductUnit',
        'multi_language_description_list' => 'setMultiLanguageDescriptionList',
        'multi_language_subject_list' => 'setMultiLanguageSubjectList',
        'aliexpress_category_id' => 'setAliexpressCategoryId',
        'brand_name' => 'setBrandName',
        'main_image_urls_list' => 'setMainImageUrlsList',
        'sku_info_list' => 'setSkuInfoList',
        'attribute_list' => 'setAttributeList',
        'inventory_deduction_strategy' => 'setInventoryDeductionStrategy',
        'weight' => 'setWeight',
        'package_length' => 'setPackageLength',
        'package_height' => 'setPackageHeight',
        'package_width' => 'setPackageWidth',
        'freight_template_id' => 'setFreightTemplateId',
        'size_chart_id' => 'setSizeChartId',
        'shipping_lead_time' => 'setShippingLeadTime',
        'service_policy_id' => 'setServicePolicyId',
        'ae_group_ids' => 'setAeGroupIds',
        'package_type' => 'setPackageType',
        'lot_num' => 'setLotNum',
        'gtin' => 'setGtin',
        'tnved_codes' => 'setTnvedCodes',
        'okpd2_codes' => 'setOkpd2Codes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'language' => 'getLanguage',
        'product_unit' => 'getProductUnit',
        'multi_language_description_list' => 'getMultiLanguageDescriptionList',
        'multi_language_subject_list' => 'getMultiLanguageSubjectList',
        'aliexpress_category_id' => 'getAliexpressCategoryId',
        'brand_name' => 'getBrandName',
        'main_image_urls_list' => 'getMainImageUrlsList',
        'sku_info_list' => 'getSkuInfoList',
        'attribute_list' => 'getAttributeList',
        'inventory_deduction_strategy' => 'getInventoryDeductionStrategy',
        'weight' => 'getWeight',
        'package_length' => 'getPackageLength',
        'package_height' => 'getPackageHeight',
        'package_width' => 'getPackageWidth',
        'freight_template_id' => 'getFreightTemplateId',
        'size_chart_id' => 'getSizeChartId',
        'shipping_lead_time' => 'getShippingLeadTime',
        'service_policy_id' => 'getServicePolicyId',
        'ae_group_ids' => 'getAeGroupIds',
        'package_type' => 'getPackageType',
        'lot_num' => 'getLotNum',
        'gtin' => 'getGtin',
        'tnved_codes' => 'getTnvedCodes',
        'okpd2_codes' => 'getOkpd2Codes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['language'] = $data['language'] ?? null;
        $this->container['product_unit'] = $data['product_unit'] ?? null;
        $this->container['multi_language_description_list'] = $data['multi_language_description_list'] ?? null;
        $this->container['multi_language_subject_list'] = $data['multi_language_subject_list'] ?? null;
        $this->container['aliexpress_category_id'] = $data['aliexpress_category_id'] ?? null;
        $this->container['brand_name'] = $data['brand_name'] ?? null;
        $this->container['main_image_urls_list'] = $data['main_image_urls_list'] ?? null;
        $this->container['sku_info_list'] = $data['sku_info_list'] ?? null;
        $this->container['attribute_list'] = $data['attribute_list'] ?? null;
        $this->container['inventory_deduction_strategy'] = $data['inventory_deduction_strategy'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['package_length'] = $data['package_length'] ?? null;
        $this->container['package_height'] = $data['package_height'] ?? null;
        $this->container['package_width'] = $data['package_width'] ?? null;
        $this->container['freight_template_id'] = $data['freight_template_id'] ?? null;
        $this->container['size_chart_id'] = $data['size_chart_id'] ?? null;
        $this->container['shipping_lead_time'] = $data['shipping_lead_time'] ?? null;
        $this->container['service_policy_id'] = $data['service_policy_id'] ?? null;
        $this->container['ae_group_ids'] = $data['ae_group_ids'] ?? null;
        $this->container['package_type'] = $data['package_type'] ?? null;
        $this->container['lot_num'] = $data['lot_num'] ?? null;
        $this->container['gtin'] = $data['gtin'] ?? null;
        $this->container['tnved_codes'] = $data['tnved_codes'] ?? null;
        $this->container['okpd2_codes'] = $data['okpd2_codes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['multi_language_description_list'] === null) {
            $invalidProperties[] = "'multi_language_description_list' can't be null";
        }
        if ($this->container['multi_language_subject_list'] === null) {
            $invalidProperties[] = "'multi_language_subject_list' can't be null";
        }
        if ($this->container['aliexpress_category_id'] === null) {
            $invalidProperties[] = "'aliexpress_category_id' can't be null";
        }
        if ($this->container['brand_name'] === null) {
            $invalidProperties[] = "'brand_name' can't be null";
        }
        if ($this->container['main_image_urls_list'] === null) {
            $invalidProperties[] = "'main_image_urls_list' can't be null";
        }
        if ($this->container['sku_info_list'] === null) {
            $invalidProperties[] = "'sku_info_list' can't be null";
        }
        if ($this->container['attribute_list'] === null) {
            $invalidProperties[] = "'attribute_list' can't be null";
        }
        if ($this->container['inventory_deduction_strategy'] === null) {
            $invalidProperties[] = "'inventory_deduction_strategy' can't be null";
        }
        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if ($this->container['package_length'] === null) {
            $invalidProperties[] = "'package_length' can't be null";
        }
        if (($this->container['package_length'] > 700)) {
            $invalidProperties[] = "invalid value for 'package_length', must be smaller than or equal to 700.";
        }

        if (($this->container['package_length'] < 1)) {
            $invalidProperties[] = "invalid value for 'package_length', must be bigger than or equal to 1.";
        }

        if ($this->container['package_height'] === null) {
            $invalidProperties[] = "'package_height' can't be null";
        }
        if (($this->container['package_height'] > 700)) {
            $invalidProperties[] = "invalid value for 'package_height', must be smaller than or equal to 700.";
        }

        if (($this->container['package_height'] < 1)) {
            $invalidProperties[] = "invalid value for 'package_height', must be bigger than or equal to 1.";
        }

        if ($this->container['package_width'] === null) {
            $invalidProperties[] = "'package_width' can't be null";
        }
        if (($this->container['package_width'] > 700)) {
            $invalidProperties[] = "invalid value for 'package_width', must be smaller than or equal to 700.";
        }

        if (($this->container['package_width'] < 1)) {
            $invalidProperties[] = "invalid value for 'package_width', must be bigger than or equal to 1.";
        }

        if ($this->container['freight_template_id'] === null) {
            $invalidProperties[] = "'freight_template_id' can't be null";
        }
        if ($this->container['shipping_lead_time'] === null) {
            $invalidProperties[] = "'shipping_lead_time' can't be null";
        }
        if ($this->container['service_policy_id'] === null) {
            $invalidProperties[] = "'service_policy_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language Основной язык товара
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets product_unit
     *
     * @return int|null
     */
    public function getProductUnit()
    {
        return $this->container['product_unit'];
    }

    /**
     * Sets product_unit
     *
     * @param int|null $product_unit Единица измерения товара. Наиболее часто используются штуки (100000015), упаковки (100000014) и комплект (100000017)
     *
     * @return self
     */
    public function setProductUnit($product_unit)
    {
        $this->container['product_unit'] = $product_unit;

        return $this;
    }

    /**
     * Gets multi_language_description_list
     *
     * @return \OpenAPI\Client\Model\OpenAsyncProductApiSingleLanguageDescriptionDto[]
     */
    public function getMultiLanguageDescriptionList()
    {
        return $this->container['multi_language_description_list'];
    }

    /**
     * Sets multi_language_description_list
     *
     * @param \OpenAPI\Client\Model\OpenAsyncProductApiSingleLanguageDescriptionDto[] $multi_language_description_list Список названий товара на нескольких языках
     *
     * @return self
     */
    public function setMultiLanguageDescriptionList($multi_language_description_list)
    {
        $this->container['multi_language_description_list'] = $multi_language_description_list;

        return $this;
    }

    /**
     * Gets multi_language_subject_list
     *
     * @return \OpenAPI\Client\Model\OpenAsyncProductApiSingleLanguageTitleDto[]
     */
    public function getMultiLanguageSubjectList()
    {
        return $this->container['multi_language_subject_list'];
    }

    /**
     * Sets multi_language_subject_list
     *
     * @param \OpenAPI\Client\Model\OpenAsyncProductApiSingleLanguageTitleDto[] $multi_language_subject_list Список описаний товара на нескольких языках
     *
     * @return self
     */
    public function setMultiLanguageSubjectList($multi_language_subject_list)
    {
        $this->container['multi_language_subject_list'] = $multi_language_subject_list;

        return $this;
    }

    /**
     * Gets aliexpress_category_id
     *
     * @return string
     */
    public function getAliexpressCategoryId()
    {
        return $this->container['aliexpress_category_id'];
    }

    /**
     * Sets aliexpress_category_id
     *
     * @param string $aliexpress_category_id Идентификатор категории нижнего уровня
     *
     * @return self
     */
    public function setAliexpressCategoryId($aliexpress_category_id)
    {
        $this->container['aliexpress_category_id'] = $aliexpress_category_id;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string $brand_name Название бренда. Этот параметр нужно передать или отдельно, или внутри объекта attribute_list, aliexpress_attribute_name_id = 2. Если бренда нет, передайте None. Можно передавать только бренды, которые вы добавили в свой магазин
     *
     * @return self
     */
    public function setBrandName($brand_name)
    {
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets main_image_urls_list
     *
     * @return string[]
     */
    public function getMainImageUrlsList()
    {
        return $this->container['main_image_urls_list'];
    }

    /**
     * Sets main_image_urls_list
     *
     * @param string[] $main_image_urls_list Массив ссылок на основные изображения товара. Все ссылки должны быть прямыми, то есть вести на изображение на вашем сервере или на CDN AliExpress
     *
     * @return self
     */
    public function setMainImageUrlsList($main_image_urls_list)
    {
        $this->container['main_image_urls_list'] = $main_image_urls_list;

        return $this;
    }

    /**
     * Gets sku_info_list
     *
     * @return \OpenAPI\Client\Model\OpenAsyncProductApiSkuInfoDto[]
     */
    public function getSkuInfoList()
    {
        return $this->container['sku_info_list'];
    }

    /**
     * Sets sku_info_list
     *
     * @param \OpenAPI\Client\Model\OpenAsyncProductApiSkuInfoDto[] $sku_info_list Содержит три обязательных параметра: * inventory (остаток товара на складе от 1 до 999999), * price (цена товара от 0,01 до 999999), * sku_code (идентификатор экземпляра: артикул или штрихкод) И ряд необязательных: discount_price, bar_code (штрихкод, обязательно для продавцов, работающих по модели Фулфилмент «Цайняо»), sku_attributes_list (список полей sku_attribute_name, sku_attribute_value и sku_image_url)
     *
     * @return self
     */
    public function setSkuInfoList($sku_info_list)
    {
        $this->container['sku_info_list'] = $sku_info_list;

        return $this;
    }

    /**
     * Gets attribute_list
     *
     * @return \OpenAPI\Client\Model\OpenAsyncProductApiAttributeDto[]
     */
    public function getAttributeList()
    {
        return $this->container['attribute_list'];
    }

    /**
     * Sets attribute_list
     *
     * @param \OpenAPI\Client\Model\OpenAsyncProductApiAttributeDto[] $attribute_list Список ключей и значений атрибутов товара. * attribute_name, string (название нового атрибута) * attribute_value, string (новое значение атрибута) * attribute_name_id, int (существующее в системе название атрибута) * attribute_value_id, int (существующее в системе значение атрибута)
     *
     * @return self
     */
    public function setAttributeList($attribute_list)
    {
        $this->container['attribute_list'] = $attribute_list;

        return $this;
    }

    /**
     * Gets inventory_deduction_strategy
     *
     * @return string
     */
    public function getInventoryDeductionStrategy()
    {
        return $this->container['inventory_deduction_strategy'];
    }

    /**
     * Sets inventory_deduction_strategy
     *
     * @param string $inventory_deduction_strategy В какой момент будет вычитаться остаток товара: в момент оплаты (payment_success_deduct) или в момент совершения заказа place_order_withhold)
     *
     * @return self
     */
    public function setInventoryDeductionStrategy($inventory_deduction_strategy)
    {
        $this->container['inventory_deduction_strategy'] = $inventory_deduction_strategy;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string $weight Вес товара в упаковке (используется для расчёта доставки). Может принимать значение от 0,001 до 500 килограммов
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets package_length
     *
     * @return int
     */
    public function getPackageLength()
    {
        return $this->container['package_length'];
    }

    /**
     * Sets package_length
     *
     * @param int $package_length Длина упаковки в сантиметрах. Может принимать значение от 1 до 700 сантиметров
     *
     * @return self
     */
    public function setPackageLength($package_length)
    {

        if (($package_length > 700)) {
            throw new \InvalidArgumentException('invalid value for $package_length when calling OpenAsyncProductApiProduct., must be smaller than or equal to 700.');
        }
        if (($package_length < 1)) {
            throw new \InvalidArgumentException('invalid value for $package_length when calling OpenAsyncProductApiProduct., must be bigger than or equal to 1.');
        }

        $this->container['package_length'] = $package_length;

        return $this;
    }

    /**
     * Gets package_height
     *
     * @return int
     */
    public function getPackageHeight()
    {
        return $this->container['package_height'];
    }

    /**
     * Sets package_height
     *
     * @param int $package_height Высота упаковки в сантиметрах. Может принимать значение от 1 до 700 сантиметров
     *
     * @return self
     */
    public function setPackageHeight($package_height)
    {

        if (($package_height > 700)) {
            throw new \InvalidArgumentException('invalid value for $package_height when calling OpenAsyncProductApiProduct., must be smaller than or equal to 700.');
        }
        if (($package_height < 1)) {
            throw new \InvalidArgumentException('invalid value for $package_height when calling OpenAsyncProductApiProduct., must be bigger than or equal to 1.');
        }

        $this->container['package_height'] = $package_height;

        return $this;
    }

    /**
     * Gets package_width
     *
     * @return int
     */
    public function getPackageWidth()
    {
        return $this->container['package_width'];
    }

    /**
     * Sets package_width
     *
     * @param int $package_width Ширина упаковки в сантиметрах. Может принимать значение от 1 до 700 сантиметров
     *
     * @return self
     */
    public function setPackageWidth($package_width)
    {

        if (($package_width > 700)) {
            throw new \InvalidArgumentException('invalid value for $package_width when calling OpenAsyncProductApiProduct., must be smaller than or equal to 700.');
        }
        if (($package_width < 1)) {
            throw new \InvalidArgumentException('invalid value for $package_width when calling OpenAsyncProductApiProduct., must be bigger than or equal to 1.');
        }

        $this->container['package_width'] = $package_width;

        return $this;
    }

    /**
     * Gets freight_template_id
     *
     * @return string
     */
    public function getFreightTemplateId()
    {
        return $this->container['freight_template_id'];
    }

    /**
     * Sets freight_template_id
     *
     * @param string $freight_template_id Идентификатор шаблона доставки, уникален для каждого продавца или шаблона
     *
     * @return self
     */
    public function setFreightTemplateId($freight_template_id)
    {
        $this->container['freight_template_id'] = $freight_template_id;

        return $this;
    }

    /**
     * Gets size_chart_id
     *
     * @return string|null
     */
    public function getSizeChartId()
    {
        return $this->container['size_chart_id'];
    }

    /**
     * Sets size_chart_id
     *
     * @param string|null $size_chart_id Идентификатор таблицы размеров. Нужен для одежды, обуви, аксессуаров и белья
     *
     * @return self
     */
    public function setSizeChartId($size_chart_id)
    {
        $this->container['size_chart_id'] = $size_chart_id;

        return $this;
    }

    /**
     * Gets shipping_lead_time
     *
     * @return string
     */
    public function getShippingLeadTime()
    {
        return $this->container['shipping_lead_time'];
    }

    /**
     * Sets shipping_lead_time
     *
     * @param string $shipping_lead_time Время на отправку заказа (время, за которое вы обязуетесь ввести трек-номер)
     *
     * @return self
     */
    public function setShippingLeadTime($shipping_lead_time)
    {
        $this->container['shipping_lead_time'] = $shipping_lead_time;

        return $this;
    }

    /**
     * Gets service_policy_id
     *
     * @return string
     */
    public function getServicePolicyId()
    {
        return $this->container['service_policy_id'];
    }

    /**
     * Sets service_policy_id
     *
     * @param string $service_policy_id Идентификатор шаблон услуг, описывающего условия возврата. id = 0 соответствует шаблону по умолчанию: Service Template for New Sellers
     *
     * @return self
     */
    public function setServicePolicyId($service_policy_id)
    {
        $this->container['service_policy_id'] = $service_policy_id;

        return $this;
    }

    /**
     * Gets ae_group_ids
     *
     * @return string[]|null
     */
    public function getAeGroupIds()
    {
        return $this->container['ae_group_ids'];
    }

    /**
     * Sets ae_group_ids
     *
     * @param string[]|null $ae_group_ids Идентификатор группы товаров
     *
     * @return self
     */
    public function setAeGroupIds($ae_group_ids)
    {
        $this->container['ae_group_ids'] = $ae_group_ids;

        return $this;
    }

    /**
     * Gets package_type
     *
     * @return bool|null
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     *
     * @param bool|null $package_type Метод продаж. false - поштучно, true - лотами
     *
     * @return self
     */
    public function setPackageType($package_type)
    {
        $this->container['package_type'] = $package_type;

        return $this;
    }

    /**
     * Gets lot_num
     *
     * @return string|null
     */
    public function getLotNum()
    {
        return $this->container['lot_num'];
    }

    /**
     * Sets lot_num
     *
     * @param string|null $lot_num Количество твоара в лоте
     *
     * @return self
     */
    public function setLotNum($lot_num)
    {
        $this->container['lot_num'] = $lot_num;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin gtin
     *
     * @return self
     */
    public function setGtin($gtin)
    {
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets tnved_codes
     *
     * @return string[]|null
     */
    public function getTnvedCodes()
    {
        return $this->container['tnved_codes'];
    }

    /**
     * Sets tnved_codes
     *
     * @param string[]|null $tnved_codes tnved_codes
     *
     * @return self
     */
    public function setTnvedCodes($tnved_codes)
    {
        $this->container['tnved_codes'] = $tnved_codes;

        return $this;
    }

    /**
     * Gets okpd2_codes
     *
     * @return string[]|null
     */
    public function getOkpd2Codes()
    {
        return $this->container['okpd2_codes'];
    }

    /**
     * Sets okpd2_codes
     *
     * @param string[]|null $okpd2_codes okpd2_codes
     *
     * @return self
     */
    public function setOkpd2Codes($okpd2_codes)
    {
        $this->container['okpd2_codes'] = $okpd2_codes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


