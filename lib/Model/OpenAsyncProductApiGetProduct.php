<?php
/**
 * OpenAsyncProductApiGetProduct
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * open-async-product-api api
 *
 * open-async-product-api
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OpenAsyncProductApiGetProduct Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OpenAsyncProductApiGetProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'open_async_product_apiGetProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'ali_created_at' => '\DateTime',
        'ali_updated_at' => '\DateTime',
        'owner_member_id' => 'string',
        'owner_member_seq' => 'string',
        'bulk_discount' => 'string',
        'bulk_order' => 'string',
        'base_unit' => 'string',
        'add_unit' => 'string',
        'add_weight' => 'float',
        'category_id' => 'string',
        'currency_code' => 'string',
        'delivery_time' => 'string',
        'freight_template_id' => 'string',
        'package_height' => 'string',
        'package_length' => 'string',
        'package_width' => 'string',
        'lot_num' => 'string',
        'price' => 'string',
        'property' => '\OpenAPI\Client\Model\GetProductProperty[]',
        'status_type' => 'string',
        'unit' => 'string',
        'promise_template_id' => 'string',
        'product_reduce_strategy' => 'string',
        'gross_weight' => 'float',
        'sizechart_id' => 'string',
        'package_type' => 'bool',
        'descriptions' => '\OpenAPI\Client\Model\GetProductDescription[]',
        'groups' => '\OpenAPI\Client\Model\GetProductGroup[]',
        'media' => '\OpenAPI\Client\Model\GetProductMedia[]',
        'sku' => '\OpenAPI\Client\Model\GetProductSKU[]',
        'subject' => '\OpenAPI\Client\Model\GetProductSubject[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'ali_created_at' => 'date-time',
        'ali_updated_at' => 'date-time',
        'owner_member_id' => null,
        'owner_member_seq' => 'int64',
        'bulk_discount' => 'int64',
        'bulk_order' => 'int64',
        'base_unit' => 'int64',
        'add_unit' => 'int64',
        'add_weight' => 'float',
        'category_id' => 'int64',
        'currency_code' => null,
        'delivery_time' => 'int64',
        'freight_template_id' => 'int64',
        'package_height' => 'int64',
        'package_length' => 'int64',
        'package_width' => 'int64',
        'lot_num' => 'int64',
        'price' => null,
        'property' => null,
        'status_type' => null,
        'unit' => 'int64',
        'promise_template_id' => 'int64',
        'product_reduce_strategy' => null,
        'gross_weight' => 'float',
        'sizechart_id' => 'int64',
        'package_type' => null,
        'descriptions' => null,
        'groups' => null,
        'media' => null,
        'sku' => null,
        'subject' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'ali_created_at' => false,
		'ali_updated_at' => false,
		'owner_member_id' => false,
		'owner_member_seq' => false,
		'bulk_discount' => false,
		'bulk_order' => false,
		'base_unit' => false,
		'add_unit' => false,
		'add_weight' => false,
		'category_id' => false,
		'currency_code' => false,
		'delivery_time' => false,
		'freight_template_id' => false,
		'package_height' => false,
		'package_length' => false,
		'package_width' => false,
		'lot_num' => false,
		'price' => false,
		'property' => false,
		'status_type' => false,
		'unit' => false,
		'promise_template_id' => false,
		'product_reduce_strategy' => false,
		'gross_weight' => false,
		'sizechart_id' => false,
		'package_type' => false,
		'descriptions' => false,
		'groups' => false,
		'media' => false,
		'sku' => false,
		'subject' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ali_created_at' => 'ali_created_at',
        'ali_updated_at' => 'ali_updated_at',
        'owner_member_id' => 'owner_member_id',
        'owner_member_seq' => 'owner_member_seq',
        'bulk_discount' => 'bulk_discount',
        'bulk_order' => 'bulk_order',
        'base_unit' => 'base_unit',
        'add_unit' => 'add_unit',
        'add_weight' => 'add_weight',
        'category_id' => 'category_id',
        'currency_code' => 'currency_code',
        'delivery_time' => 'delivery_time',
        'freight_template_id' => 'freight_template_id',
        'package_height' => 'package_height',
        'package_length' => 'package_length',
        'package_width' => 'package_width',
        'lot_num' => 'lot_num',
        'price' => 'price',
        'property' => 'property',
        'status_type' => 'status_type',
        'unit' => 'unit',
        'promise_template_id' => 'promise_template_id',
        'product_reduce_strategy' => 'product_reduce_strategy',
        'gross_weight' => 'gross_weight',
        'sizechart_id' => 'sizechart_id',
        'package_type' => 'package_type',
        'descriptions' => 'descriptions',
        'groups' => 'groups',
        'media' => 'media',
        'sku' => 'sku',
        'subject' => 'subject'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ali_created_at' => 'setAliCreatedAt',
        'ali_updated_at' => 'setAliUpdatedAt',
        'owner_member_id' => 'setOwnerMemberId',
        'owner_member_seq' => 'setOwnerMemberSeq',
        'bulk_discount' => 'setBulkDiscount',
        'bulk_order' => 'setBulkOrder',
        'base_unit' => 'setBaseUnit',
        'add_unit' => 'setAddUnit',
        'add_weight' => 'setAddWeight',
        'category_id' => 'setCategoryId',
        'currency_code' => 'setCurrencyCode',
        'delivery_time' => 'setDeliveryTime',
        'freight_template_id' => 'setFreightTemplateId',
        'package_height' => 'setPackageHeight',
        'package_length' => 'setPackageLength',
        'package_width' => 'setPackageWidth',
        'lot_num' => 'setLotNum',
        'price' => 'setPrice',
        'property' => 'setProperty',
        'status_type' => 'setStatusType',
        'unit' => 'setUnit',
        'promise_template_id' => 'setPromiseTemplateId',
        'product_reduce_strategy' => 'setProductReduceStrategy',
        'gross_weight' => 'setGrossWeight',
        'sizechart_id' => 'setSizechartId',
        'package_type' => 'setPackageType',
        'descriptions' => 'setDescriptions',
        'groups' => 'setGroups',
        'media' => 'setMedia',
        'sku' => 'setSku',
        'subject' => 'setSubject'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ali_created_at' => 'getAliCreatedAt',
        'ali_updated_at' => 'getAliUpdatedAt',
        'owner_member_id' => 'getOwnerMemberId',
        'owner_member_seq' => 'getOwnerMemberSeq',
        'bulk_discount' => 'getBulkDiscount',
        'bulk_order' => 'getBulkOrder',
        'base_unit' => 'getBaseUnit',
        'add_unit' => 'getAddUnit',
        'add_weight' => 'getAddWeight',
        'category_id' => 'getCategoryId',
        'currency_code' => 'getCurrencyCode',
        'delivery_time' => 'getDeliveryTime',
        'freight_template_id' => 'getFreightTemplateId',
        'package_height' => 'getPackageHeight',
        'package_length' => 'getPackageLength',
        'package_width' => 'getPackageWidth',
        'lot_num' => 'getLotNum',
        'price' => 'getPrice',
        'property' => 'getProperty',
        'status_type' => 'getStatusType',
        'unit' => 'getUnit',
        'promise_template_id' => 'getPromiseTemplateId',
        'product_reduce_strategy' => 'getProductReduceStrategy',
        'gross_weight' => 'getGrossWeight',
        'sizechart_id' => 'getSizechartId',
        'package_type' => 'getPackageType',
        'descriptions' => 'getDescriptions',
        'groups' => 'getGroups',
        'media' => 'getMedia',
        'sku' => 'getSku',
        'subject' => 'getSubject'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('ali_created_at', $data ?? [], null);
        $this->setIfExists('ali_updated_at', $data ?? [], null);
        $this->setIfExists('owner_member_id', $data ?? [], null);
        $this->setIfExists('owner_member_seq', $data ?? [], null);
        $this->setIfExists('bulk_discount', $data ?? [], null);
        $this->setIfExists('bulk_order', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('add_unit', $data ?? [], null);
        $this->setIfExists('add_weight', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('delivery_time', $data ?? [], null);
        $this->setIfExists('freight_template_id', $data ?? [], null);
        $this->setIfExists('package_height', $data ?? [], null);
        $this->setIfExists('package_length', $data ?? [], null);
        $this->setIfExists('package_width', $data ?? [], null);
        $this->setIfExists('lot_num', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('property', $data ?? [], null);
        $this->setIfExists('status_type', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('promise_template_id', $data ?? [], null);
        $this->setIfExists('product_reduce_strategy', $data ?? [], null);
        $this->setIfExists('gross_weight', $data ?? [], null);
        $this->setIfExists('sizechart_id', $data ?? [], null);
        $this->setIfExists('package_type', $data ?? [], null);
        $this->setIfExists('descriptions', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('media', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ali_created_at
     *
     * @return \DateTime|null
     */
    public function getAliCreatedAt()
    {
        return $this->container['ali_created_at'];
    }

    /**
     * Sets ali_created_at
     *
     * @param \DateTime|null $ali_created_at ali_created_at
     *
     * @return self
     */
    public function setAliCreatedAt($ali_created_at)
    {

        if (is_null($ali_created_at)) {
            throw new \InvalidArgumentException('non-nullable ali_created_at cannot be null');
        }

        $this->container['ali_created_at'] = $ali_created_at;

        return $this;
    }

    /**
     * Gets ali_updated_at
     *
     * @return \DateTime|null
     */
    public function getAliUpdatedAt()
    {
        return $this->container['ali_updated_at'];
    }

    /**
     * Sets ali_updated_at
     *
     * @param \DateTime|null $ali_updated_at ali_updated_at
     *
     * @return self
     */
    public function setAliUpdatedAt($ali_updated_at)
    {

        if (is_null($ali_updated_at)) {
            throw new \InvalidArgumentException('non-nullable ali_updated_at cannot be null');
        }

        $this->container['ali_updated_at'] = $ali_updated_at;

        return $this;
    }

    /**
     * Gets owner_member_id
     *
     * @return string|null
     */
    public function getOwnerMemberId()
    {
        return $this->container['owner_member_id'];
    }

    /**
     * Sets owner_member_id
     *
     * @param string|null $owner_member_id логин, создавшего продукт
     *
     * @return self
     */
    public function setOwnerMemberId($owner_member_id)
    {

        if (is_null($owner_member_id)) {
            throw new \InvalidArgumentException('non-nullable owner_member_id cannot be null');
        }

        $this->container['owner_member_id'] = $owner_member_id;

        return $this;
    }

    /**
     * Gets owner_member_seq
     *
     * @return string|null
     */
    public function getOwnerMemberSeq()
    {
        return $this->container['owner_member_seq'];
    }

    /**
     * Sets owner_member_seq
     *
     * @param string|null $owner_member_seq ID, создавшего продукт
     *
     * @return self
     */
    public function setOwnerMemberSeq($owner_member_seq)
    {

        if (is_null($owner_member_seq)) {
            throw new \InvalidArgumentException('non-nullable owner_member_seq cannot be null');
        }

        $this->container['owner_member_seq'] = $owner_member_seq;

        return $this;
    }

    /**
     * Gets bulk_discount
     *
     * @return string|null
     */
    public function getBulkDiscount()
    {
        return $this->container['bulk_discount'];
    }

    /**
     * Sets bulk_discount
     *
     * @param string|null $bulk_discount bulk_discount
     *
     * @return self
     */
    public function setBulkDiscount($bulk_discount)
    {

        if (is_null($bulk_discount)) {
            throw new \InvalidArgumentException('non-nullable bulk_discount cannot be null');
        }

        $this->container['bulk_discount'] = $bulk_discount;

        return $this;
    }

    /**
     * Gets bulk_order
     *
     * @return string|null
     */
    public function getBulkOrder()
    {
        return $this->container['bulk_order'];
    }

    /**
     * Sets bulk_order
     *
     * @param string|null $bulk_order bulk_order
     *
     * @return self
     */
    public function setBulkOrder($bulk_order)
    {

        if (is_null($bulk_order)) {
            throw new \InvalidArgumentException('non-nullable bulk_order cannot be null');
        }

        $this->container['bulk_order'] = $bulk_order;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit base_unit
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {

        if (is_null($base_unit)) {
            throw new \InvalidArgumentException('non-nullable base_unit cannot be null');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets add_unit
     *
     * @return string|null
     */
    public function getAddUnit()
    {
        return $this->container['add_unit'];
    }

    /**
     * Sets add_unit
     *
     * @param string|null $add_unit Индивидуальная настройка веса посылки
     *
     * @return self
     */
    public function setAddUnit($add_unit)
    {

        if (is_null($add_unit)) {
            throw new \InvalidArgumentException('non-nullable add_unit cannot be null');
        }

        $this->container['add_unit'] = $add_unit;

        return $this;
    }

    /**
     * Gets add_weight
     *
     * @return float|null
     */
    public function getAddWeight()
    {
        return $this->container['add_weight'];
    }

    /**
     * Sets add_weight
     *
     * @param float|null $add_weight Индивидуальная настройка веса посылки
     *
     * @return self
     */
    public function setAddWeight($add_weight)
    {

        if (is_null($add_weight)) {
            throw new \InvalidArgumentException('non-nullable add_weight cannot be null');
        }

        $this->container['add_weight'] = $add_weight;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string|null $category_id category_id
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {

        if (is_null($category_id)) {
            throw new \InvalidArgumentException('non-nullable category_id cannot be null');
        }

        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {

        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return string|null
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param string|null $delivery_time delivery_time
     *
     * @return self
     */
    public function setDeliveryTime($delivery_time)
    {

        if (is_null($delivery_time)) {
            throw new \InvalidArgumentException('non-nullable delivery_time cannot be null');
        }

        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets freight_template_id
     *
     * @return string|null
     */
    public function getFreightTemplateId()
    {
        return $this->container['freight_template_id'];
    }

    /**
     * Sets freight_template_id
     *
     * @param string|null $freight_template_id Идентификатор шаблона доставки, уникален для каждого продавца или шаблона
     *
     * @return self
     */
    public function setFreightTemplateId($freight_template_id)
    {

        if (is_null($freight_template_id)) {
            throw new \InvalidArgumentException('non-nullable freight_template_id cannot be null');
        }

        $this->container['freight_template_id'] = $freight_template_id;

        return $this;
    }

    /**
     * Gets package_height
     *
     * @return string|null
     */
    public function getPackageHeight()
    {
        return $this->container['package_height'];
    }

    /**
     * Sets package_height
     *
     * @param string|null $package_height package_height
     *
     * @return self
     */
    public function setPackageHeight($package_height)
    {

        if (is_null($package_height)) {
            throw new \InvalidArgumentException('non-nullable package_height cannot be null');
        }

        $this->container['package_height'] = $package_height;

        return $this;
    }

    /**
     * Gets package_length
     *
     * @return string|null
     */
    public function getPackageLength()
    {
        return $this->container['package_length'];
    }

    /**
     * Sets package_length
     *
     * @param string|null $package_length package_length
     *
     * @return self
     */
    public function setPackageLength($package_length)
    {

        if (is_null($package_length)) {
            throw new \InvalidArgumentException('non-nullable package_length cannot be null');
        }

        $this->container['package_length'] = $package_length;

        return $this;
    }

    /**
     * Gets package_width
     *
     * @return string|null
     */
    public function getPackageWidth()
    {
        return $this->container['package_width'];
    }

    /**
     * Sets package_width
     *
     * @param string|null $package_width package_width
     *
     * @return self
     */
    public function setPackageWidth($package_width)
    {

        if (is_null($package_width)) {
            throw new \InvalidArgumentException('non-nullable package_width cannot be null');
        }

        $this->container['package_width'] = $package_width;

        return $this;
    }

    /**
     * Gets lot_num
     *
     * @return string|null
     */
    public function getLotNum()
    {
        return $this->container['lot_num'];
    }

    /**
     * Sets lot_num
     *
     * @param string|null $lot_num Значение количества в упаковке
     *
     * @return self
     */
    public function setLotNum($lot_num)
    {

        if (is_null($lot_num)) {
            throw new \InvalidArgumentException('non-nullable lot_num cannot be null');
        }

        $this->container['lot_num'] = $lot_num;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string|null $price Цена
     *
     * @return self
     */
    public function setPrice($price)
    {

        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets property
     *
     * @return \OpenAPI\Client\Model\GetProductProperty[]|null
     */
    public function getProperty()
    {
        return $this->container['property'];
    }

    /**
     * Sets property
     *
     * @param \OpenAPI\Client\Model\GetProductProperty[]|null $property property
     *
     * @return self
     */
    public function setProperty($property)
    {

        if (is_null($property)) {
            throw new \InvalidArgumentException('non-nullable property cannot be null');
        }

        $this->container['property'] = $property;

        return $this;
    }

    /**
     * Gets status_type
     *
     * @return string|null
     */
    public function getStatusType()
    {
        return $this->container['status_type'];
    }

    /**
     * Sets status_type
     *
     * @param string|null $status_type Статус товара
     *
     * @return self
     */
    public function setStatusType($status_type)
    {

        if (is_null($status_type)) {
            throw new \InvalidArgumentException('non-nullable status_type cannot be null');
        }

        $this->container['status_type'] = $status_type;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {

        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets promise_template_id
     *
     * @return string|null
     */
    public function getPromiseTemplateId()
    {
        return $this->container['promise_template_id'];
    }

    /**
     * Sets promise_template_id
     *
     * @param string|null $promise_template_id Шаблон возвратова (по умолчанию 0 - это системный шаблон возвратов)
     *
     * @return self
     */
    public function setPromiseTemplateId($promise_template_id)
    {

        if (is_null($promise_template_id)) {
            throw new \InvalidArgumentException('non-nullable promise_template_id cannot be null');
        }

        $this->container['promise_template_id'] = $promise_template_id;

        return $this;
    }

    /**
     * Gets product_reduce_strategy
     *
     * @return string|null
     */
    public function getProductReduceStrategy()
    {
        return $this->container['product_reduce_strategy'];
    }

    /**
     * Sets product_reduce_strategy
     *
     * @param string|null $product_reduce_strategy Вычет запасов
     *
     * @return self
     */
    public function setProductReduceStrategy($product_reduce_strategy)
    {

        if (is_null($product_reduce_strategy)) {
            throw new \InvalidArgumentException('non-nullable product_reduce_strategy cannot be null');
        }

        $this->container['product_reduce_strategy'] = $product_reduce_strategy;

        return $this;
    }

    /**
     * Gets gross_weight
     *
     * @return float|null
     */
    public function getGrossWeight()
    {
        return $this->container['gross_weight'];
    }

    /**
     * Sets gross_weight
     *
     * @param float|null $gross_weight Вес в упаковке
     *
     * @return self
     */
    public function setGrossWeight($gross_weight)
    {

        if (is_null($gross_weight)) {
            throw new \InvalidArgumentException('non-nullable gross_weight cannot be null');
        }

        $this->container['gross_weight'] = $gross_weight;

        return $this;
    }

    /**
     * Gets sizechart_id
     *
     * @return string|null
     */
    public function getSizechartId()
    {
        return $this->container['sizechart_id'];
    }

    /**
     * Sets sizechart_id
     *
     * @param string|null $sizechart_id Таблица размеров
     *
     * @return self
     */
    public function setSizechartId($sizechart_id)
    {

        if (is_null($sizechart_id)) {
            throw new \InvalidArgumentException('non-nullable sizechart_id cannot be null');
        }

        $this->container['sizechart_id'] = $sizechart_id;

        return $this;
    }

    /**
     * Gets package_type
     *
     * @return bool|null
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     *
     * @param bool|null $package_type Значение метода продаж (true - Лотами, false - Поштучно)
     *
     * @return self
     */
    public function setPackageType($package_type)
    {

        if (is_null($package_type)) {
            throw new \InvalidArgumentException('non-nullable package_type cannot be null');
        }

        $this->container['package_type'] = $package_type;

        return $this;
    }

    /**
     * Gets descriptions
     *
     * @return \OpenAPI\Client\Model\GetProductDescription[]|null
     */
    public function getDescriptions()
    {
        return $this->container['descriptions'];
    }

    /**
     * Sets descriptions
     *
     * @param \OpenAPI\Client\Model\GetProductDescription[]|null $descriptions descriptions
     *
     * @return self
     */
    public function setDescriptions($descriptions)
    {

        if (is_null($descriptions)) {
            throw new \InvalidArgumentException('non-nullable descriptions cannot be null');
        }

        $this->container['descriptions'] = $descriptions;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \OpenAPI\Client\Model\GetProductGroup[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \OpenAPI\Client\Model\GetProductGroup[]|null $groups ID групп продуктов
     *
     * @return self
     */
    public function setGroups($groups)
    {

        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }

        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \OpenAPI\Client\Model\GetProductMedia[]|null
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \OpenAPI\Client\Model\GetProductMedia[]|null $media media
     *
     * @return self
     */
    public function setMedia($media)
    {

        if (is_null($media)) {
            throw new \InvalidArgumentException('non-nullable media cannot be null');
        }

        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return \OpenAPI\Client\Model\GetProductSKU[]|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param \OpenAPI\Client\Model\GetProductSKU[]|null $sku sku
     *
     * @return self
     */
    public function setSku($sku)
    {

        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }

        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return \OpenAPI\Client\Model\GetProductSubject[]|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param \OpenAPI\Client\Model\GetProductSubject[]|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {

        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }

        $this->container['subject'] = $subject;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


