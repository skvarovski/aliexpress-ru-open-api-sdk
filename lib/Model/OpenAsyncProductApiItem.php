<?php
/**
 * OpenAsyncProductApiItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * open-async-product-api api
 *
 * open-async-product-api
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OpenAsyncProductApiItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class OpenAsyncProductApiItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'open_async_product_apiItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'id' => 'string',
        'image' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'status' => 'string',
        'link' => 'string',
        'group' => 'string[]',
        'price_range' => 'float[]',
        'old_price_range' => 'float[]',
        'stock' => 'int',
        'shipping_template' => 'string',
        'decline_reason' => 'string',
        'offline_at' => 'string',
        'offline_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'id' => null,
        'image' => null,
        'created_at' => null,
        'updated_at' => null,
        'status' => null,
        'link' => null,
        'group' => null,
        'price_range' => 'float',
        'old_price_range' => 'float',
        'stock' => 'int32',
        'shipping_template' => null,
        'decline_reason' => null,
        'offline_at' => null,
        'offline_reason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'id' => 'id',
        'image' => 'image',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'status' => 'status',
        'link' => 'link',
        'group' => 'group',
        'price_range' => 'price_range',
        'old_price_range' => 'old_price_range',
        'stock' => 'stock',
        'shipping_template' => 'shipping_template',
        'decline_reason' => 'decline_reason',
        'offline_at' => 'offline_at',
        'offline_reason' => 'offline_reason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'id' => 'setId',
        'image' => 'setImage',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'status' => 'setStatus',
        'link' => 'setLink',
        'group' => 'setGroup',
        'price_range' => 'setPriceRange',
        'old_price_range' => 'setOldPriceRange',
        'stock' => 'setStock',
        'shipping_template' => 'setShippingTemplate',
        'decline_reason' => 'setDeclineReason',
        'offline_at' => 'setOfflineAt',
        'offline_reason' => 'setOfflineReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'id' => 'getId',
        'image' => 'getImage',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'status' => 'getStatus',
        'link' => 'getLink',
        'group' => 'getGroup',
        'price_range' => 'getPriceRange',
        'old_price_range' => 'getOldPriceRange',
        'stock' => 'getStock',
        'shipping_template' => 'getShippingTemplate',
        'decline_reason' => 'getDeclineReason',
        'offline_at' => 'getOfflineAt',
        'offline_reason' => 'getOfflineReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ONLINE = 'online';
    const STATUS_OFFLINE = 'offline';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ONLINE,
            self::STATUS_OFFLINE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = $data['title'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['link'] = $data['link'] ?? null;
        $this->container['group'] = $data['group'] ?? null;
        $this->container['price_range'] = $data['price_range'] ?? null;
        $this->container['old_price_range'] = $data['old_price_range'] ?? null;
        $this->container['stock'] = $data['stock'] ?? null;
        $this->container['shipping_template'] = $data['shipping_template'] ?? null;
        $this->container['decline_reason'] = $data['decline_reason'] ?? null;
        $this->container['offline_at'] = $data['offline_at'] ?? null;
        $this->container['offline_reason'] = $data['offline_reason'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Название продукта
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Идентификатор продукта
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image Картинка
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Дата создания
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at Дата обновления
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Статус продукта
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link link
     *
     * @return self
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string[]|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string[]|null $group Группы продукта
     *
     * @return self
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets price_range
     *
     * @return float[]|null
     */
    public function getPriceRange()
    {
        return $this->container['price_range'];
    }

    /**
     * Sets price_range
     *
     * @param float[]|null $price_range price_range
     *
     * @return self
     */
    public function setPriceRange($price_range)
    {
        $this->container['price_range'] = $price_range;

        return $this;
    }

    /**
     * Gets old_price_range
     *
     * @return float[]|null
     */
    public function getOldPriceRange()
    {
        return $this->container['old_price_range'];
    }

    /**
     * Sets old_price_range
     *
     * @param float[]|null $old_price_range old_price_range
     *
     * @return self
     */
    public function setOldPriceRange($old_price_range)
    {
        $this->container['old_price_range'] = $old_price_range;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return int|null
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param int|null $stock stock
     *
     * @return self
     */
    public function setStock($stock)
    {
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets shipping_template
     *
     * @return string|null
     */
    public function getShippingTemplate()
    {
        return $this->container['shipping_template'];
    }

    /**
     * Sets shipping_template
     *
     * @param string|null $shipping_template Шаблон доставки
     *
     * @return self
     */
    public function setShippingTemplate($shipping_template)
    {
        $this->container['shipping_template'] = $shipping_template;

        return $this;
    }

    /**
     * Gets decline_reason
     *
     * @return string|null
     */
    public function getDeclineReason()
    {
        return $this->container['decline_reason'];
    }

    /**
     * Sets decline_reason
     *
     * @param string|null $decline_reason Причина блокировки
     *
     * @return self
     */
    public function setDeclineReason($decline_reason)
    {
        $this->container['decline_reason'] = $decline_reason;

        return $this;
    }

    /**
     * Gets offline_at
     *
     * @return string|null
     */
    public function getOfflineAt()
    {
        return $this->container['offline_at'];
    }

    /**
     * Sets offline_at
     *
     * @param string|null $offline_at Дата снятия с публикации
     *
     * @return self
     */
    public function setOfflineAt($offline_at)
    {
        $this->container['offline_at'] = $offline_at;

        return $this;
    }

    /**
     * Gets offline_reason
     *
     * @return string|null
     */
    public function getOfflineReason()
    {
        return $this->container['offline_reason'];
    }

    /**
     * Sets offline_reason
     *
     * @param string|null $offline_reason Причина снятия с продажи
     *
     * @return self
     */
    public function setOfflineReason($offline_reason)
    {
        $this->container['offline_reason'] = $offline_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


